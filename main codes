//2328599 Ä°rfan Kaan ALGAN
#include <stdio.h>
#include <conio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

#define SPACE ' '
char *instructionType(char *);      //finds the instruction type
void getInstructionFromUser();      // if we get instruction from user we will use this function
void getInstructionFromFile();      //if we if we get instruction from file we will use this function
void convertion(int, char []);      //we convert immidiate to binary

void RtypeOp(char *,char[]);        // contains rtype op values
void Rrsister(char *, char *, char *, char *,char []);  // contains rtype register values
void RrsisterJr(char *,char []);    // contains rtype R jr values
void RShamt(char *,char []);        // contains rtype shamt values
void RFunct(char *,char[]);         // contains rtype funct values
void sllShamt(char *,char *,char []);

void ItypeOp(char *,char[]);        // contains Itype op values
void Irsister(char *,char *,char *,char[]); // contains Itype register values
void immediate(char *,char[]);      // Take immediate value
void stringToInt(char *,char[]);    // take string conver integer


void convertHex(char []);       // convert binary number of instruction to hex value
void storeInstruction(char *, int *);   
void checkInstruction(char *);  // take instruction divide it into pieces


int main(){
	int choice,Exit = 1;
    int i,j;
    while(Exit){
        printf("\nSelect the desired mode of operation\n\n(1) for Interactive\n(2) for Batch\n(0) for Exit\n\nMode:");
        scanf("%d",&choice);
        fflush(stdin);
        switch(choice){
            case 1:
                getInstructionFromUser();
                break;
            case 2:
                getInstructionFromFile();
                break;
            case 0:
                exit(1);
                break;
            default:
            printf("Error! operator is not correct");    
        }
    }
    getch();
    return 0;
}
void checkInstruction(char *instruct){
    printf("\n%s ->",instruct);
    char instruction[32];
    char *temp;
    char *temp1;
    char *temp2;
    char *temp3;
    char codeInBinary[32]={0};
    char *instType;
    char *tempdata[4];
    int i=0,j;

    FILE *fp;

    temp = strtok (instruct," ");
    while (temp){
        tempdata[i] = temp;
        temp = strtok (NULL, " ");
        i++;
    }
    j= 0;

    fp = fopen("C:\\Users\\IRPHAN\\Desktop\\corg term project\\binaryCodes.txt", "a");
    // exiting program 
    if (fp == NULL) {
        printf("Error!");
        exit(1);
    }
    instType = instructionType(tempdata[0]);    //finds the instruction type


    if(strcmp(instType,"R")== 0){
        if(strcmp(tempdata[0],"sll")== 0){
            RtypeOp(tempdata[0],codeInBinary);
            Rrsister(tempdata[0],tempdata[1],tempdata[2],tempdata[3],codeInBinary);
            RFunct(tempdata[0],codeInBinary);
            convertHex(codeInBinary);
        }
        else if(strcmp(tempdata[0],"move")== 0){
            temp1 = strtok (tempdata[2],"\n");
            temp2 = "add";
            temp3 ="$zero,";
            RtypeOp(temp2,codeInBinary);
            Rrsister(temp2,tempdata[1],temp3,temp1,codeInBinary);
            RShamt(temp2,codeInBinary);
            RFunct(temp2,codeInBinary);
            convertHex(codeInBinary);
        }
        else if(strcmp(tempdata[0],"jr")== 0){
            RtypeOp(tempdata[0],codeInBinary);
            RrsisterJr(tempdata[1],codeInBinary);
            strcat(codeInBinary,"000000000000000");
            RFunct(tempdata[0],codeInBinary);
            convertHex(codeInBinary);
        }
        else{
            RtypeOp(tempdata[0],codeInBinary);
            Rrsister(tempdata[0],tempdata[1],tempdata[2],tempdata[3],codeInBinary);
            RShamt(tempdata[0],codeInBinary);
            RFunct(tempdata[0],codeInBinary);
            convertHex(codeInBinary);
        }
        fprintf(fp,"%s\n",codeInBinary);
    }
    if(strcmp(instType,"I")== 0){
        if(strcmp(tempdata[0],"lw")== 0 || strcmp(tempdata[0],"sw")== 0){
            ItypeOp(tempdata[0],codeInBinary);
            Irsister(tempdata[0],tempdata[1],tempdata[2],codeInBinary);
            immediate(tempdata[2],codeInBinary);
            convertHex(codeInBinary);
        }
        else if(strcmp(tempdata[0],"bne")== 0 || strcmp(tempdata[0],"beq")== 0){
            ItypeOp(tempdata[0],codeInBinary);
            Irsister(tempdata[0],tempdata[1],tempdata[2],codeInBinary);
            strcat(codeInBinary,"0000000000000000");
            convertHex(codeInBinary);
        }
        else{
            ItypeOp(tempdata[0],codeInBinary);
            Irsister(tempdata[0],tempdata[1],tempdata[2],codeInBinary);
            stringToInt(tempdata[3],codeInBinary);
            convertHex(codeInBinary);
        }
        fprintf(fp,"%s\n",codeInBinary);
         
    }
    fclose(fp);

}
void storeInstruction(char *temp, int *i){      //we take each line and divide into pieces
   char *blank, *start;
   char *tempInstruction;
   char *data[30];
   int length, c = 0, d = 0;
   length = strlen(temp);
   blank = temp;
   start = (char*)malloc(length+1);
   if ( start == NULL )
      exit(EXIT_FAILURE);
   while(*(blank+c))
   {
      if ( *(blank+c) == SPACE && *(blank+c+1) == SPACE )
      {}
      else{
        *(start+d) = *(blank+c);
        d++;
      }
      c++;
   }
   int j = *i;
   *(start+d)='\0';
   tempInstruction = strtok (start,":");    
    while (tempInstruction){
        data[j] = tempInstruction;
        tempInstruction = strtok (NULL, ":");
        *i++;
    }
    checkInstruction(data[j]);
   free(start);
    
}
void getInstructionFromFile(){
    int i;
    FILE *fileIn = fopen("C:\\Users\\IRPHAN\\Desktop\\corg term project\\instruction.txt","r");
    if(fileIn == NULL)
    {
        printf("FAILED!\n");
        exit(1);
    }

    int listLength=0;
    char charNum;
    while ((charNum=fgetc(fileIn))!=EOF){
        if (charNum=='\n'){
            listLength++;
        }
    }
    fclose(fileIn);
    FILE *file1In = fopen("C:\\Users\\IRPHAN\\Desktop\\corg term project\\instruction.txt","r");
    if(file1In == NULL)
    {
        printf("FAILED!\n");
        exit(1);
    }
    char **instruction = malloc((listLength+1) * sizeof(char *)); // Allocate memory for row pointers
    for(i = 0; i < (listLength+1); i++)
        instruction[i] = malloc(30 * sizeof(char));  // Allocate memory for each row separately

    i = 0;
    while(fgets(instruction[i], 32, file1In)) 
	{
        instruction[i][strlen(instruction[i]) - 1] = '\0';
        i++;
    }
    fclose(file1In);
    int j = 0;
    int k = 0;
    for(j = 0; j < (listLength+1); j++)
         storeInstruction(instruction[j],&k);
}
void getInstructionFromUser(){
    char instruction[32];
    char *tempInstruction;
    char *instruction_type;
    char *data[4];
    char *temp;
    char *temp1;
    char *temp2;
    char *temp3;
    char codeInBinary[32]={0};
    int i,j;

    FILE *fptr;
    FILE *fp;

    // opening file in writing mode
    fptr = fopen("C:\\Users\\IRPHAN\\Desktop\\corg term project\\usedinsturctions.txt", "a");
    // exiting program 
    if (fptr == NULL) {
        printf("Error!");
        exit(1);
    }

    printf("\nPlease input an instruction: ");
    fgets(instruction, sizeof(instruction), stdin);
    fflush(stdin);
    fprintf(fptr, "%s", instruction);
    fclose(fptr);
    i = 0;
    tempInstruction = strtok (instruction," "); //take instruction divide it into pieces
    while (tempInstruction){
        data[i] = tempInstruction;
        tempInstruction = strtok (NULL, " ");
        i++;
    }
    instruction_type = instructionType(data[0]);
    fp = fopen("C:\\Users\\IRPHAN\\Desktop\\corg term project\\binaryCodes.txt", "a");
    // exiting program 
    if (fp == NULL) {
        printf("Error!");
        exit(1);
    }
    if(strcmp(instruction_type,"R")== 0){
        if(strcmp(data[0],"sll")== 0){
            temp = strtok (data[3],"\n");
            RtypeOp(data[0],codeInBinary);
            RFunct(data[0],codeInBinary);
            Rrsister(data[0],data[1],data[2],temp,codeInBinary);
            
        }
        else if(strcmp(data[0],"move")== 0){
            temp1 = strtok (data[2],"\n");
            temp2 = "add";
            temp3 ="$zero,";
            printf("1 == %s 2 == %s 3 === %s 4 == %s",temp2,data[1],temp3,temp1);
            RtypeOp(temp2,codeInBinary);
            Rrsister(temp2,data[1],temp3,temp1,codeInBinary);
            RShamt(temp2,codeInBinary);
            RFunct(temp2,codeInBinary);
        }
        else if(strcmp(data[0],"jr")== 0){
            RtypeOp(data[0],codeInBinary);
            RrsisterJr(data[1],codeInBinary);
            strcat(codeInBinary,"0000000000000000");
            RFunct(data[0],codeInBinary);
        }
        else{
            temp = strtok (data[3],"\n");
            RtypeOp(data[0],codeInBinary);
            RFunct(data[0],codeInBinary);
            RShamt(data[0],codeInBinary);
            Rrsister(data[0],data[1],data[2],temp,codeInBinary);
            
        }
        fprintf(fp,"%s\n",codeInBinary);
    }
    if(strcmp(instruction_type,"I")== 0){
        if(strcmp(data[0],"lw")== 0 || strcmp(data[0],"sw")== 0){
            ItypeOp(data[0],codeInBinary);
            Irsister(data[0],data[1],data[2],codeInBinary);
            immediate(data[2],codeInBinary);
        }
        else if(strcmp(data[0],"bne")== 0 || strcmp(data[0],"beq")== 0){
            ItypeOp(data[0],codeInBinary);
            Irsister(data[0],data[1],data[2],codeInBinary);
            strcat(codeInBinary,"0000000000000000");
        }
        else{
            ItypeOp(data[0],codeInBinary);
            stringToInt(data[3],codeInBinary);
            Irsister(data[0],data[1],data[2],codeInBinary);
            
        }
        fprintf(fp,"%s\n",codeInBinary);
         
    }
    if(strcmp(instruction_type,"j")== 0){

    }
    fclose(fp);
    convertHex(codeInBinary); 

}
void convertHex(char codeInBinary[32]){
    char *binary[]= {"0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111","G",0};
    char *hex[] = {"0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F",0};
    char temp[4];
    char result[8] ={0};
    int flag = 0;
    int i,j=0, k=0, z;
    for(i = 0; i < 32; i = i + 4){          //we take last 4 digit from codeInBinary
        z = 0;
        for(j = i; j < i + 4; j++ ){
            temp[z] = codeInBinary[j];      // we equalize the temp
            z++;
        }
        int y = 0;
        while(binary[y]){
            if(strcmp(binary[y], temp) == 1){       // we find the hex digit of temp and we appendthe result
                strcat(result,hex[y-1]);
                break;
            }
             y++;
        }
        for(k=0;k<4;k++)
            temp[k] = 0;
        k= 0;
    }
   printf(" 0X%s\n",result);
   char tempresult[15];
   strcat(tempresult,"0X");
   strcat(tempresult,result);
   FILE *fphex = fopen("C:\\Users\\IRPHAN\\Desktop\\corg term project\\hexCodes.txt", "a");
    // exiting program 
    if (fphex == NULL) {
        printf("Error!");
        exit(1);
    }
   fprintf(fphex,"%s\n",tempresult);
   fclose(fphex);

}

//////////////////////////////////////////////////////////////////I TYPE ///////////////////////////////////////////////////////////////////////////
void stringToInt(char *rt, char codeInBinary[32]){
    int tempImmediate = atoi(rt);   // convert rt string to integer
    convertion(tempImmediate,codeInBinary);

}
void convertion(int tempImmediate,char codeInBinary[32]){
   
    int binarynum = 0;
    char *binaryStr;
    int rem, temp = 1;
    int templenght;
    while (tempImmediate!=0)
    {
        rem = tempImmediate%2;
        tempImmediate = tempImmediate / 2;
        binarynum = binarynum + rem*temp;
        temp = temp * 10;
    }
    int l=1;
    binarynum = abs(binarynum);     // we convert the rt value to binary
    int tempBinary =binarynum;
    while(tempBinary>9){ l++; tempBinary/=10; } //we find the size of binary rt value
    binaryStr =(char*) malloc(l*sizeof(char));

    templenght = 16-l;              // we need 16 bit binary number if our number is less then 16 bit we need to add 0 until it will be 16 bit
    while(templenght != 0){
        strcat(codeInBinary,"0");   
        templenght--;
    }
    sprintf(binaryStr, "%d", binarynum);
    strcat(codeInBinary,binaryStr);
}

void immediate(char *rt, char codeInBinary[32]){

    char *splitRt[2];
    char *tempRt;
    int i = 0;
    tempRt = strtok (rt,"(");   //we split rt value 
    while (tempRt){
        splitRt[i] = tempRt;
        tempRt = strtok (NULL, "(");
        i++;
    }
    int tempImmediate = atoi(splitRt[0]);   // convert rt immediate value to integer
    convertion(tempImmediate,codeInBinary);
   
}
void ItypeOp(char *opcode, char codeInBinary[32]){
    char *I_type[] = {"addi","addiu","andi","beq","bne","lbu","lhu","lh","lui","lw","ori","slti","sltiu","sb","sh","sw",0};
    char *valueOp[] ={"001000","001001","001100","000100","000101","100100","100101","100001","001111","100011","001101","001010","001011","101000","101001","101011",0};
  
    int i = 0;
    while(I_type[i]){       
        if(strcmp(I_type[i], opcode) == 0){   
            strcat(codeInBinary,valueOp[i]);
            break;
        }
        i++;
    }
    
}
void Irsister(char *op,char *rs,char *rt,char codeInBinary[32]){

    char *registersRt[] = {"$0)","$1)","$2)","$3)","$4)","$5)","$6)","$7)","$8)","$9)","$10)","$11)","$12)","$13)","$14)","$15)","$16)","$17)","$18)","$19)","$20)","$21)","$22)","$23)","$24)","$25)"
    ,"$26)","$27)","$28)","$29)","$30)","$31)","$zero)","$at)","$v0)","$v1)","$a0)","$a1)","$a2)","$a3)","$t0)","$t1)","$t2)","$t3)","$t4)","$t5)","$t6)","$t7)",
    "$s0)","$s1)","$s2)","$s3)","$s4)","$s5)","$s6)","$s7)","$t8)","$t9)","$k0)","$k1)","$gp)","$sp)","$fp)","$ra)",0};

    char *registersRs[] = {"$0,","$1,","$2,","$3,","$4,","$5,","$6,","$7,","$8,","$9,","$10,","$11,","$12,","$13,","$14,","$15,","$16,","$17,","$18,","$19,","$20,","$21,","$22,","$23,","$24,","$25,"
    ,"$26,","$27,","$28,","$29,","$30,","$31,","$zero,","$at,","$v0,","$v1,","$a0,","$a1,","$a2,","$a3,","$t0,","$t1,","$t2,","$t3,","$t4,","$t5,","$t6,","$t7,",
    "$s0,","$s1,","$s2,","$s3,","$s4,","$s5,","$s6,","$s7,","$t8,","$t9,","$k0,","$k1,","$gp,","$sp,","$fp,","$ra,",0};

    char *valueRsRt[] = {"00000","00001","00010","00011","00100","00101","00110","00111","01000","01001","01010","01011","01100","01101","01110","01111","10000","10001","10010","10011","10100","10101","10110","10111","11000","11001"
    ,"11010","11011","11100","11101","11110","11111","00000","00001","00010","00011","00100","00101","00110","00111","01000","01001","01010","01011","01100","01101","01110","01111","10000","10001","10010","10011","10100","10101","10110","10111","11000","11001"
    ,"11010","11011","11100","11101","11110","11111",0};
    char *splitRt[2];
    char *splitRt1;
    char *tempRt;
    char *temp;
    int i = 0;
    
   
    if(strcmp(op,"lw")== 0 || strcmp(op,"sw")== 0){
        tempRt = strtok (rt,"(");
        while (tempRt){
            splitRt[i] = tempRt;
            tempRt = strtok (NULL, "(");
            i++;
        }
        temp = strtok (splitRt[1],"\n");
        while (temp){
            splitRt1 = temp;
            temp = strtok (NULL, "\n");
            i++;
        }
    }
    int j = 0;
    if(strcmp(op,"lw")== 0 || strcmp(op,"sw")== 0){
        while(registersRt[j]){
            if(strcmp(registersRt[j],splitRt1) == 0){   
                strcat(codeInBinary,valueRsRt[j]);
                break;
            }
            j++;
        }
    }
    else{
        while(registersRs[j]){
            if(strcmp(registersRs[j],rt) == 0){   
                strcat(codeInBinary,valueRsRt[j]);
                break;
            }
            j++;
        }
    }
     int k = 0;
    while(registersRs[k]){
        if(strcmp(registersRs[k], rs) == 0){   
            strcat(codeInBinary,valueRsRt[k]);
            break;
        }
        k++;
    }
}


////////////////////////////////////////////////////////////////////R TYPE////////////////////////////////////////////////////////////////////////////
void RFunct(char *opcode, char codeInBinary[32]){
    char *R_type[] = {"add","addu","sub","subu","and","nor","or","xor","slt","srlv","srav","sllv","sra","sltu","sll","srl","multu","mult","jalr","jr",0};
    char *valueFunct[] ={"100000","100001","100010","100011","100100","100111","100101","101000","101010","000110","000111","000100","000011","101011","000000","000010","011001","011000","001001","001000",0};
    int i = 0;
    while(R_type[i]){
        if(strcmp(R_type[i], opcode) == 0){   
            strcat(codeInBinary,valueFunct[i]);
            break;
        }
        i++;
    }
}
void RShamt(char *op,char codeInBinary[32]){
   strcat(codeInBinary,"00000");
}
void RrsisterJr(char *rd, char codeInBinary[32]){
    char *registersRs[] = {"$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","$10","$11","$12","$13","$14","$15","$16","$17","$18","$19","$20","$21","$22","$23","$24","$25"
    ,"$26","$27","$28","$29","$30","$31","$zero","$at","$v0","$v1","$a0","$a1","$a2","$a3","$t0","$t1","$t2","$t3","$t4","$t5","$t6","$t7",
    "$s0","$s1","$s2","$s3","$s4","$s5","$s6","$s7","$t8","$t9","$k0","$k1","$gp","$sp","$fp","$r",0};
    char *valueRsRd[] = {"00000","00001","00010","00011","00100","00101","00110","00111","01000","01001","01010","01011","01100","01101","01110","01111","10000","10001","10010","10011","10100","10101","10110","10111","11000","11001"
    ,"11010","11011","11100","11101","11110","11111","00000","00001","00010","00011","00100","00101","00110","00111","01000","01001","01010","01011","01100","01101","01110","01111","10000","10001","10010","10011","10100","10101","10110","10111","11000","11001"
    ,"11010","11011","11100","11101","11110","11111",0};
    int j = 0;
 
    while(registersRs[j]){
        if(strcmp(registersRs[j], rd) == 0){   
            strcat(codeInBinary,valueRsRd[j]);
            break;
        }
        j++;
    }


}
void sllShamt(char *op,char *rt,char codeInBinary[32]){
    int tempImmediate = atoi(rt);
    int binarynum = 0;
    char *binaryStr;
    int rem, temp = 1;
    int templenght;
    while (tempImmediate!=0)
    {
        rem = tempImmediate%2;
        tempImmediate = tempImmediate / 2;
        binarynum = binarynum + rem*temp;
        temp = temp * 10;
    }
    int l=1;
    binarynum = abs(binarynum);
    int tempBinary =binarynum;
    while(tempBinary>9){ l++; tempBinary/=10; }
    binaryStr =(char*) malloc(l*sizeof(char));

    templenght = 8-l;
    while(templenght != 0){
        strcat(codeInBinary,"0");
        templenght--;
    }
    sprintf(binaryStr, "%d", binarynum);
    strcat(codeInBinary,binaryStr);


}

void Rrsister(char *op, char *rd,char *rs,char *rt,char codeInBinary[32]){
    char *registersRsRd[] = {"$0,","$1,","$2,","$3,","$4,","$5,","$6,","$7,","$8,","$9,","$10,","$11,","$12,","$13,","$14,","$15,","$16,","$17,","$18,","$19,","$20,","$21,","$22,","$23,","$24,","$25,"
    ,"$26,","$27,","$28,","$29,","$30,","$31,","$zero,","$at,","$v0,","$v1,","$a0,","$a1,","$a2,","$a3,","$t0,","$t1,","$t2,","$t3,","$t4,","$t5,","$t6,","$t7,",
    "$s0,","$s1,","$s2,","$s3,","$s4,","$s5,","$s6,","$s7,","$t8,","$t9,","$k0,","$k1,","$gp,","$sp,","$fp,","$ra,",0};

    char *registersRt[] = {"$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","$10","$11","$12","$13","$14","$15","$16","$17","$18","$19","$20","$21","$22","$23","$24","$25"
    ,"$26","$27","$28","$29","$30","$31","$zero","$at","$v0","$v1","$a0","$a1","$a2","$a3","$t0","$t1","$t2","$t3","$t4","$t5","$t6","$t7",
    "$s0","$s1","$s2","$s3","$s4","$s5","$s6","$s7","$t8","$t9","$k0","$k1","$gp","$sp","$fp","$ra",0};


    char *valueRsRdRt[] = {"00000","00001","00010","00011","00100","00101","00110","00111","01000","01001","01010","01011","01100","01101","01110","01111","10000","10001","10010","10011","10100","10101","10110","10111","11000","11001"
    ,"11010","11011","11100","11101","11110","11111","00000","00001","00010","00011","00100","00101","00110","00111","01000","01001","01010","01011","01100","01101","01110","01111","10000","10001","10010","10011","10100","10101","10110","10111","11000","11001"
    ,"11010","11011","11100","11101","11110","11111",0};
    int i = 0;
    
    while(registersRsRd[i]){
        if(strcmp(registersRsRd[i], rs) == 0){   
            strcat(codeInBinary,valueRsRdRt[i]);
            break;
        }
        i++;
    }
    int j = 0;
    if(op == "sll"){
        sllShamt(op,rt,codeInBinary);
    }
    else{
        while(registersRt[j]){
            if(strcmp(registersRt[j], rt) == 0){   
                strcat(codeInBinary,valueRsRdRt[j]);
                break;
            }
            j++;
        }
    }
    int k = 0;
    while(registersRsRd[k]){
        if(strcmp(registersRsRd[k], rd) == 0){   
            strcat(codeInBinary,valueRsRdRt[k]);
            break;
        }
    k++;
    }



}
void RtypeOp(char *opcode, char codeInBinary[32]){
    strcat(codeInBinary,"000000");
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

char *instructionType(char *op){
    int i;
    char *R_type[] = {"add","addu","sub","subu","and","nor","or","xor","slt","srlv","srav","sllv","sra","sltu","sll","srl","multu","mult","jalr","jr","move",0};
    char *I_type[] = {"addi","addiu","andi","beq","bne","lbu","lhu","ll","lui","lw","ori","slti","sltiu","sb","sc","sh","sw",0};
    char *J_type[] = {"j","jal",0};
    char *Pseudo[] = {"blt", "bgt", "ble", "bge", "li", "la", "mul", "div",0};
    int R_Len =sizeof(R_type)/sizeof(R_type[0]);
    int I_Len =sizeof(I_type)/sizeof(I_type[0]);
    int J_Len =sizeof(J_type)/sizeof(J_type[0]);
    int P_Len =sizeof(Pseudo)/sizeof(Pseudo[0]);
    int flag = 0;
    while(R_type[i]){
        if(strcmp(R_type[i], op) == 0){   
            flag = 1;
            return "R";
        }
        i++;
    }
    i = 0;
    while(I_type[i] && flag == 0){
        if(strcmp(I_type[i], op) == 0){   
            flag = 1;
            return "I";
        }
        i++;
    }
    i = 0;
    while(J_type[i] && flag == 0){
        if(strcmp(J_type[i], op) == 0){   
            flag = 1;
            return "J";
        }
        i++;
    }
    i = 0;
    while(Pseudo[i] && flag == 0){
        if(strcmp(Pseudo[i], op) == 0){   
            flag = 1;
            return "P";
        }
        i++;
    }
    
}
